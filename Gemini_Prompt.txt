Ensure that every development step adheres to GUIDELINES.md and verify that we are on the right track at each stage.

Environment: Python 3.10+ (virtualenv active)
Language: Python

Objective:
Improve the `/tts` (Text-To-Speech) feature in SakaiBot for production-level quality, structure, and multilingual stability.

Requirements:
1. **Project Structure & Naming:**
   - Ensure all files and modules are placed in their correct directories.
   - Test-related files must be inside `/tests` with clear, consistent naming (e.g. `test_tts_handler.py`).
   - Source modules must follow standard, professional naming conventions and directory organization defined in `GUIDELINES.md`.

2. **Functional Improvement — Reply Handling:**
   - Currently `/tts` works only for direct messages but fails when replying to an existing message.
   - Implement logic so that when a user replies to a message and sends `/tts`, the bot detects and converts the *replied text* to voice as well.
   - Handle both cases consistently (direct command + reply command).

3. **Smart Text Normalization & Mixed-Language Support:**
   - Add an intelligent preprocessing layer before voice generation to handle:
     - Mixed Persian–English text (detect non-Persian segments and pronounce them clearly).
     - Automatic diacritization or phonetic enhancement for better Persian pronunciation.
     - Optional normalization of numbers, emojis, and symbols for smoother audio output.
   - Use a lightweight, open-source NLP or text-normalization approach that can run locally (no paid APIs).

4. **Integration & Performance:**
   - Integrate seamlessly with the existing `/tts` command handler.
   - Maintain efficiency inside the virtual environment without adding unnecessary dependencies.
   - Ensure that audio generation is fast, stable, and produces clean, natural speech.

Validation:
- Test in the live SakaiBot CLI:
  1. Run `/tts` on a normal message — confirm proper voice output.
  2. Reply to another message with `/tts` — confirm the replied text converts correctly.
  3. Send mixed Persian-English text (e.g. "سلام world!") — confirm both parts are pronounced naturally.
  4. Verify correct pronunciation of complex or unvoweled Persian text.
- Check that all project files are located and named according to professional standards.
- Provide a short summary report detailing:
  - Root causes found,
  - Implemented improvements,
  - Results from real-environment testing.
