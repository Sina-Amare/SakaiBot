[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "sakaibot"
version = "2.0.0"
description = "Advanced Telegram userbot with AI capabilities"
readme = "README.md"
license = {file = "LICENSE"}
authors = [
    {name = "Sina Amare", email = "sina.amare@example.com"}
]
maintainers = [
    {name = "Sina Amare", email = "sina.amare@example.com"}
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Communications :: Chat",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
requires-python = ">=3.10"
dependencies = [
    "telethon>=1.36.0",
    "cryptg>=0.4.0",
    "openai>=1.51.0",
    "tiktoken>=0.7.0",
    "SpeechRecognition>=3.10.4",
    "pydub>=0.25.1",
    "edge-tts>=6.1.12",
    "pydantic>=2.9.2",
    "pydantic-settings>=2.6.0",
    "python-dotenv>=1.0.1",
    "pytz>=2024.2",
    "aiofiles>=24.1.0",
    "aiohttp>=3.10.5",
    "diskcache>=5.6.3",
    "python-json-logger>=2.0.7",
    "rich>=13.8.1",
    "click>=8.1.7",
    "orjson>=3.10.7",
    "tenacity>=9.0.0",
    "backoff>=2.2.1",
]

[project.optional-dependencies]
dev = [
    "pytest>=8.3.3",
    "pytest-asyncio>=0.24.0",
    "pytest-cov>=5.0.0",
    "pytest-mock>=3.14.0",
    "black>=24.8.0",
    "isort>=5.13.2",
    "flake8>=7.1.1",
    "mypy>=1.11.2",
    "pre-commit>=3.8.0",
]

[project.urls]
"Homepage" = "https://github.com/Sina-Amare/SakaiBot"
"Bug Reports" = "https://github.com/Sina-Amare/SakaiBot/issues"
"Source" = "https://github.com/Sina-Amare/SakaiBot"

[project.scripts]
sakaibot = "src.main:main"

[tool.setuptools]
packages = ["src"]

[tool.setuptools.package-data]
"*" = ["*.json", "*.md", "*.txt"]

[tool.black]
line-length = 100
target-version = ['py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | legacy_backup
)/
'''

[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_any_unimported = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
check_untyped_defs = true

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers --cov=src --cov-report=html --cov-report=term"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
asyncio_mode = "auto"

[tool.coverage.run]
source = ["src"]
omit = ["*/tests/*", "*/test_*.py", "*/__pycache__/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.flake8]
max-line-length = 100
extend-ignore = ["E203", "W503"]
exclude = [".git", "__pycache__", "dist", "build", "*.egg", "legacy_backup"]
max-complexity = 10