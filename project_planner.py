import requests
import json
import os

# --- Configuration ---
# IMPORTANT: It is more secure to set your API key as an environment variable.
# On Mac/Linux: export OPENROUTER_API_KEY='your-key'
# On Windows: set OPENROUTER_API_KEY='your-key'
# The script will fall back to the hardcoded key if the environment variable is not found.
OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY", "sk-or-v1-3540a3a35e33c63bda99804b20b0051f6c96d96adec48a1b3f703d408a7c1ca") # Replace with your key if not using environment variables

# The model to use for project planning. Claude 3 Opus is excellent for this.
MODEL_NAME = "anthropic/claude-3-opus-20240229" # Correct model identifier for Claude 3 Opus

# Optional: For reporting to OpenRouter for rankings. Replace with your details.
YOUR_SITE_URL = "http://localhost"
YOUR_SITE_NAME = "Project Planner Script"


def generate_project_plan(project_description):
    """
    Sends a project description to the OpenRouter API and returns a project plan.

    Args:
        project_description (str): A string describing the project idea.

    Returns:
        str: The project plan generated by the AI, or an error message.
    """
    if not OPENROUTER_API_KEY or OPENROUTER_API_KEY == "YOUR_OPENROUTER_API_KEY":
        return "Error: OPENROUTER_API_KEY is not set. Please add your key to the script."

    try:
        response = requests.post(
            url="https://openrouter.ai/api/v1/chat/completions",
            headers={
                "Authorization": f"Bearer {OPENROUTER_API_KEY}",
                "Content-Type": "application/json",
                "HTTP-Referer": YOUR_SITE_URL, # Optional
                "X-Title": YOUR_SITE_NAME,      # Optional
            },
            data=json.dumps({
                "model": MODEL_NAME,
                "messages": [
                    {
                        "role": "system",
                        "content": "You are an expert project manager. Your task is to take a user's project idea and create a detailed, step-by-step project plan. The plan should include key phases, specific tasks within each phase, estimated timelines, and potential challenges or risks.the response should be in english"
                    },
                    {
                        "role": "user",
                        "content": f"Please create a project plan for the following idea: {project_description}"
                    }
                ],
                "temperature": 0.7, # Controls randomness. Lower for more deterministic plans.
                "max_tokens": 1500  # Adjust as needed for longer plans.
            })
        )

        response.raise_for_status()  # Raises an HTTPError for bad responses (4xx or 5xx)

        response_json = response.json()
        if 'choices' in response_json and len(response_json['choices']) > 0:
            return response_json['choices'][0]['message']['content'].strip()
        else:
            return f"Error: Received an unexpected response from the API: {response.text}"

    except requests.exceptions.RequestException as e:
        return f"Error: A network error occurred: {e}"
    except json.JSONDecodeError:
        return f"Error: Failed to decode the API response. Response text: {response.text}"
    except Exception as e:
        return f"An unexpected error occurred: {e}"


if __name__ == "__main__":
    print("🚀 Welcome to the AI Project Planner powered by Claude 3 Opus! 🚀")
    print("=" * 60)
    
    # Get project idea from the user
    user_project_idea = input("Please describe the project you want to plan:\n> ")
    
    if not user_project_idea.strip():
        print("\n❌ Project description cannot be empty. Please run the script again.")
    else:
        print("\n🔄 Generating your project plan... Please wait a moment.")
        print("-" * 60)
        
        # Generate and print the plan
        project_plan = generate_project_plan(user_project_idea)
        
        print("\n✅ Here is your AI-generated project plan:")
        print("=" * 60)
        print(project_plan)
        print("=" * 60)