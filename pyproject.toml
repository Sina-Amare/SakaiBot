[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "sakaibot"
version = "2.0.0"
description = "Advanced Telegram Userbot with AI Capabilities"
readme = "README.md"
authors = [
    {name = "Sina Amare", email = "your.email@example.com"}
]
license = {text = "MIT"}
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Topic :: Communications :: Chat",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]
keywords = ["telegram", "userbot", "ai", "chatbot", "automation"]
requires-python = ">=3.10"
dependencies = [
    "telethon>=1.34.0",
    "python-dotenv>=1.0.0",
    "pydantic>=2.0.0",
    "pydantic-settings>=2.0.0",
    "openai>=1.0.0",
    "google-genai>=0.1.0",
    "click>=8.1.0",
    "rich>=13.0.0",
    "tabulate>=0.9.0",
    "aiofiles>=23.0.0",
    "pytz>=2023.3",
    "SpeechRecognition>=3.10.0",
    "pydub>=0.25.1",
    "azure-cognitiveservices-speech>=1.31.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "black>=23.7.0",
    "flake8>=6.1.0",
    "mypy>=1.5.0",
    "pre-commit>=3.3.0",
    "ruff>=0.1.0",
]
optional = [
    "assemblyai>=0.17.0",
    "elevenlabs>=0.2.0",
]

[project.urls]
Homepage = "https://github.com/yourusername/SakaiBot"
Documentation = "https://github.com/yourusername/SakaiBot/docs"
Repository = "https://github.com/yourusername/SakaiBot.git"
"Bug Tracker" = "https://github.com/yourusername/SakaiBot/issues"

[project.scripts]
sakaibot = "src.cli.main:cli"

[tool.setuptools]
packages = ["src", "src.ai", "src.ai.providers", "src.cli", "src.cli.commands", "src.core", "src.telegram", "src.utils"]

[tool.setuptools.package-data]
"*" = ["*.py"]

[tool.black]
line-length = 100
target-version = ['py310', 'py311', 'py312']
include = '\.pyi?$'
exclude = '''
/(
    \.git
  | \.venv
  | venv
  | build
  | dist
  | __pycache__
)/
'''

[tool.ruff]
line-length = 100
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
]
ignore = [
    "E501",  # line too long (handled by black)
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_any_unimported = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
asyncio_mode = "auto"
addopts = "-ra -q --strict-markers"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__pycache__/*",
    "*/venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]